---
name: Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release"
        required: true
        default: "v0.0.0"

permissions:
  contents: write
  actions: read

env:
  GO_VERSION: "1.24.5"
  BUILD_FLAGS: '-trimpath -ldflags="-s -w -X main.version=${{ github.ref_name }} -X main.commit=${{ github.sha }} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)"'

jobs:
  build-matrix:
    name: Build ${{ matrix.goos }}-${{ matrix.goarch }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - goos: linux
            goarch: amd64
            runner: ubuntu-latest
          - goos: linux
            goarch: arm64
            runner: ubuntu-latest
          - goos: linux
            goarch: arm
            goarm: 7
            runner: ubuntu-latest
          - goos: darwin
            goarch: amd64
            runner: macos-latest
          - goos: darwin
            goarch: arm64
            runner: macos-latest
          - goos: windows
            goarch: amd64
            runner: windows-latest
          - goos: windows
            goarch: arm64
            runner: windows-latest

    runs-on: ${{ matrix.runner }}
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Build binary with retry
        uses: nick-invision/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_on: error
          command: |
            # Set build-time variables
            VERSION="${{ github.ref_name }}"
            COMMIT="${{ github.sha }}"
            BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)

            # Set binary name with proper extension and ARM version
            BINARY_NAME="cc-init-${VERSION}-${{ matrix.goos }}-${{ matrix.goarch }}"
            if [ "${{ matrix.goos }}" = "windows" ]; then
              BINARY_NAME="${BINARY_NAME}.exe"
            fi
            if [ -n "${{ matrix.goarm }}" ]; then
              BINARY_NAME="cc-init-${VERSION}-${{ matrix.goos }}-${{ matrix.goarch }}v${{ matrix.goarm }}"
              if [ "${{ matrix.goos }}" = "windows" ]; then
                BINARY_NAME="${BINARY_NAME}.exe"
              fi
            fi

            echo "Building ${BINARY_NAME}..."

            # Build with optimization and metadata injection
            CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} GOARM=${{ matrix.goarm }} \
            go build \
              -trimpath \
              -ldflags="-s -w -X main.version=${VERSION} -X main.commit=${COMMIT} -X main.buildTime=${BUILD_TIME}" \
              -o "${BINARY_NAME}" .

            # Verify binary was created
            if [ ! -f "${BINARY_NAME}" ]; then
              echo "❌ Binary not created: ${BINARY_NAME}"
              exit 1
            fi

            # Test binary on compatible platforms
            if [ "${{ matrix.goos }}" = "${{ runner.os }}" ] && [ "${{ matrix.goarch }}" = "amd64" ]; then
              echo "Testing binary functionality..."
              ./"${BINARY_NAME}" --version
            elif [ "${{ runner.os }}" = "Linux" ] && [ "${{ matrix.goos }}" = "windows" ]; then
              echo "Skipping binary test for Windows on Linux"
            elif [ "${{ runner.os }}" = "macOS" ] && [ "${{ matrix.goos }}" = "windows" ]; then
              echo "Skipping binary test for Windows on macOS"
            fi

            # Report build metrics
            BINARY_SIZE=$(stat -f%z "${BINARY_NAME}" 2>/dev/null || stat -c%s "${BINARY_NAME}" 2>/dev/null || echo "unknown")
            echo "✅ Built ${BINARY_NAME} (${BINARY_SIZE} bytes)"

            # Export for next steps
            echo "BINARY_NAME=${BINARY_NAME}" >> $GITHUB_ENV
            echo "BINARY_SIZE=${BINARY_SIZE}" >> $GITHUB_ENV

      - name: Create archive
        run: |
          # Determine archive name and format based on OS
          if [ "${{ matrix.goos }}" = "windows" ]; then
            ARCHIVE_NAME="cc-init-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip"
            if [ -n "${{ matrix.goarm }}" ]; then
              ARCHIVE_NAME="cc-init-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}v${{ matrix.goarm }}.zip"
            fi
            
            echo "Creating ZIP archive: ${ARCHIVE_NAME}"
            if [ "${{ runner.os }}" = "Windows" ]; then
              powershell Compress-Archive -Path "${{ env.BINARY_NAME }}" -DestinationPath "${ARCHIVE_NAME}"
            else
              zip "${ARCHIVE_NAME}" "${{ env.BINARY_NAME }}"
            fi
          else
            ARCHIVE_NAME="cc-init-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz"
            if [ -n "${{ matrix.goarm }}" ]; then
              ARCHIVE_NAME="cc-init-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}v${{ matrix.goarm }}.tar.gz"
            fi
            
            echo "Creating tar.gz archive: ${ARCHIVE_NAME}"
            tar -czf "${ARCHIVE_NAME}" "${{ env.BINARY_NAME }}"
          fi

          # Verify archive was created
          if [ ! -f "${ARCHIVE_NAME}" ]; then
            echo "❌ Archive not created: ${ARCHIVE_NAME}"
            exit 1
          fi

          # Report archive size
          ARCHIVE_SIZE=$(stat -f%z "${ARCHIVE_NAME}" 2>/dev/null || stat -c%s "${ARCHIVE_NAME}" 2>/dev/null || echo "unknown")
          echo "✅ Created ${ARCHIVE_NAME} (${ARCHIVE_SIZE} bytes)"

          echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV
          echo "ARCHIVE_SIZE=${ARCHIVE_SIZE}" >> $GITHUB_ENV

      - name: Generate checksum
        run: |
          echo "Generating SHA256 checksum for ${{ env.ARCHIVE_NAME }}..."

          if [ "${{ runner.os }}" = "Windows" ]; then
            # Windows: use certutil
            certutil -hashfile "${{ env.ARCHIVE_NAME }}" SHA256 | findstr /v "hash" | findstr /v "SHA256" > "${{ env.ARCHIVE_NAME }}.sha256"
            # Add filename to checksum file for consistency
            CHECKSUM=$(cat "${{ env.ARCHIVE_NAME }}.sha256" | tr -d '[:space:]')
            echo "${CHECKSUM}  ${{ env.ARCHIVE_NAME }}" > "${{ env.ARCHIVE_NAME }}.sha256"
          else
            # Unix: use sha256sum
            sha256sum "${{ env.ARCHIVE_NAME }}" > "${{ env.ARCHIVE_NAME }}.sha256"
          fi

          # Verify checksum file
          if [ ! -f "${{ env.ARCHIVE_NAME }}.sha256" ]; then
            echo "❌ Checksum file not created"
            exit 1
          fi

          echo "✅ Generated checksum:"
          cat "${{ env.ARCHIVE_NAME }}.sha256"

      - name: Validate archive integrity
        run: |
          echo "Validating archive integrity..."

          # Verify checksum
          if [ "${{ runner.os }}" = "Windows" ]; then
            # Windows validation
            EXPECTED=$(cat "${{ env.ARCHIVE_NAME }}.sha256" | cut -d' ' -f1)
            ACTUAL=$(certutil -hashfile "${{ env.ARCHIVE_NAME }}" SHA256 | findstr /v "hash" | findstr /v "SHA256" | tr -d '[:space:]')
            if [ "${EXPECTED}" != "${ACTUAL}" ]; then
              echo "❌ Checksum validation failed"
              echo "Expected: ${EXPECTED}"
              echo "Actual: ${ACTUAL}"
              exit 1
            fi
          else
            # Unix validation
            if ! sha256sum -c "${{ env.ARCHIVE_NAME }}.sha256"; then
              echo "❌ Checksum validation failed"
              exit 1
            fi
          fi

          echo "✅ Archive integrity validated"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: |
            ${{ env.ARCHIVE_NAME }}
            ${{ env.ARCHIVE_NAME }}.sha256
          retention-days: 5

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            *.log
            go.sum
          retention-days: 7

  create-release:
    name: Create Release
    needs: build-matrix
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      upload-url: ${{ steps.create-release.outputs.upload_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history needed for release notes

      - name: Generate release notes
        id: release-notes
        run: |
          echo "Generating release notes for ${{ github.ref_name }}..."

          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          # Create release notes
          cat > release_notes.md << 'EOF'
          # cc-init ${{ github.ref_name }}

          A Go command-line tool that quickly initializes Claude Code configuration for projects.

          EOF

          if [ -n "$PREV_TAG" ]; then
            echo "## 🔄 Changes since $PREV_TAG" >> release_notes.md
            echo "" >> release_notes.md
            
            # Get commits since last tag
            if git log --pretty=format:"- %s (%h)" "${PREV_TAG}..HEAD" | head -20 >> release_notes.md; then
              echo "" >> release_notes.md
            else
              echo "- Various improvements and bug fixes" >> release_notes.md
              echo "" >> release_notes.md
            fi
          else
            echo "## 🎉 Initial Release" >> release_notes.md
            echo "" >> release_notes.md
            echo "First release of cc-init - a tool for initializing Claude Code configuration." >> release_notes.md
            echo "" >> release_notes.md
          fi

          cat >> release_notes.md << 'EOF'
          ## 📦 Installation

          Download the appropriate binary for your platform from the assets below:

          ### Linux
          ```bash
          # AMD64
          wget https://github.com/ipfans/cc-init/releases/download/${{ github.ref_name }}/cc-init-${{ github.ref_name }}-linux-amd64.tar.gz
          tar -xzf cc-init-${{ github.ref_name }}-linux-amd64.tar.gz

          # ARM64
          wget https://github.com/ipfans/cc-init/releases/download/${{ github.ref_name }}/cc-init-${{ github.ref_name }}-linux-arm64.tar.gz
          tar -xzf cc-init-${{ github.ref_name }}-linux-arm64.tar.gz

          # ARMv7
          wget https://github.com/ipfans/cc-init/releases/download/${{ github.ref_name }}/cc-init-${{ github.ref_name }}-linux-armv7.tar.gz
          tar -xzf cc-init-${{ github.ref_name }}-linux-armv7.tar.gz
          ```

          ### macOS
          ```bash
          # Intel (AMD64)
          curl -L -o cc-init-${{ github.ref_name }}-darwin-amd64.tar.gz https://github.com/ipfans/cc-init/releases/download/${{ github.ref_name }}/cc-init-${{ github.ref_name }}-darwin-amd64.tar.gz
          tar -xzf cc-init-${{ github.ref_name }}-darwin-amd64.tar.gz

          # Apple Silicon (ARM64)
          curl -L -o cc-init-${{ github.ref_name }}-darwin-arm64.tar.gz https://github.com/ipfans/cc-init/releases/download/${{ github.ref_name }}/cc-init-${{ github.ref_name }}-darwin-arm64.tar.gz
          tar -xzf cc-init-${{ github.ref_name }}-darwin-arm64.tar.gz
          ```

          ### Windows
          ```powershell
          # AMD64
          Invoke-WebRequest -Uri "https://github.com/ipfans/cc-init/releases/download/${{ github.ref_name }}/cc-init-${{ github.ref_name }}-windows-amd64.zip" -OutFile "cc-init-${{ github.ref_name }}-windows-amd64.zip"
          Expand-Archive -Path "cc-init-${{ github.ref_name }}-windows-amd64.zip" -DestinationPath "."

          # ARM64
          Invoke-WebRequest -Uri "https://github.com/ipfans/cc-init/releases/download/${{ github.ref_name }}/cc-init-${{ github.ref_name }}-windows-arm64.zip" -OutFile "cc-init-${{ github.ref_name }}-windows-arm64.zip"
          Expand-Archive -Path "cc-init-${{ github.ref_name }}-windows-arm64.zip" -DestinationPath "."
          ```

          ## 🔐 Verification

          All downloads can be verified using the provided SHA256 checksums:

          ```bash
          # Linux/macOS
          sha256sum -c cc-init-${{ github.ref_name }}-{platform}-{arch}.{ext}.sha256

          # Windows (PowerShell)
          $hash = Get-FileHash cc-init-${{ github.ref_name }}-windows-amd64.zip -Algorithm SHA256
          $expected = Get-Content cc-init-${{ github.ref_name }}-windows-amd64.zip.sha256
          if ($hash.Hash -eq $expected.Split()[0]) { "✅ Checksum verified" } else { "❌ Checksum failed" }
          ```

          ## 🚀 Usage

          ```bash
          # Initialize Claude Code config in current directory
          ./cc-init

          # Initialize in specific directory
          ./cc-init -t /path/to/project

          # Preview changes without making them
          ./cc-init --dry-run

          # Show detailed output
          ./cc-init --verbose

          # Show version
          ./cc-init --version

          # Show help
          ./cc-init --help
          ```

          ---

          **Full Changelog**: https://github.com/ipfans/cc-init/compare/${PREV_TAG:-$(git rev-list --max-parents=0 HEAD)}...${{ github.ref_name }}
          EOF

          echo "✅ Release notes generated"
          echo "📝 Preview:"
          head -20 release_notes.md

      - name: Create GitHub release
        id: create-release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          bodyFile: release_notes.md
          draft: false
          prerelease: false
          generateReleaseNotes: false
          makeLatest: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release information
        run: |
          echo "✅ Release created successfully"
          echo "🏷️ Tag: ${{ github.ref_name }}"
          echo "🔗 URL: ${{ steps.create-release.outputs.html_url }}"
          echo "📦 Release ID: ${{ steps.create-release.outputs.id }}"

  upload-assets:
    name: Upload ${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goarm && format('v{0}', matrix.goarm) || '' }}
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: linux
            goarch: arm
            goarm: 7
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: windows
            goarch: arm64

    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Determine asset names
        id: asset-names
        run: |
          # Construct archive name based on platform
          if [ "${{ matrix.goos }}" = "windows" ]; then
            EXT="zip"
          else
            EXT="tar.gz"
          fi

          # Handle ARM version suffix
          if [ -n "${{ matrix.goarm }}" ]; then
            ASSET_NAME="cc-init-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}v${{ matrix.goarm }}.${EXT}"
          else
            ASSET_NAME="cc-init-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.${EXT}"
          fi

          echo "ASSET_NAME=${ASSET_NAME}" >> $GITHUB_OUTPUT
          echo "ASSET_EXT=${EXT}" >> $GITHUB_OUTPUT
          echo "Asset name: ${ASSET_NAME}"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ steps.asset-names.outputs.ASSET_NAME }}
          path: ./artifacts/

      - name: List downloaded artifacts
        run: |
          echo "📦 Downloaded artifacts:"
          ls -la ./artifacts/

      - name: Upload release asset with retry
        uses: nick-invision/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_on: error
          command: |
            ASSET_NAME="${{ steps.asset-names.outputs.ASSET_NAME }}"
            echo "📤 Uploading ${ASSET_NAME}..."

            # Upload the main asset
            gh release upload ${{ github.ref_name }} \
              "./artifacts/${ASSET_NAME}" \
              --clobber

            # Upload the checksum
            gh release upload ${{ github.ref_name }} \
              "./artifacts/${ASSET_NAME}.sha256" \
              --clobber

            echo "✅ Successfully uploaded ${ASSET_NAME} and checksum"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify upload
        run: |
          ASSET_NAME="${{ steps.asset-names.outputs.ASSET_NAME }}"
          echo "🔍 Verifying upload for ${ASSET_NAME}..."

          # List release assets to verify upload
          gh release view ${{ github.ref_name }} --json assets --jq '.assets[].name' | \
            grep -E "${ASSET_NAME}|${ASSET_NAME}.sha256" || {
              echo "❌ Upload verification failed for ${ASSET_NAME}"
              exit 1
            }
            
          echo "✅ Upload verified for ${ASSET_NAME}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-checksums:
    name: Create Combined Checksums
    needs: upload-assets
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./all-artifacts/

      - name: Create combined checksums file
        run: |
          echo "🔐 Creating combined checksums file..."

          # Create combined SHA256SUMS file
          cat > SHA256SUMS << 'EOF'
          # SHA256 Checksums for cc-init ${{ github.ref_name }}
          # Verify with: sha256sum -c SHA256SUMS

          EOF

          # Collect all individual checksum files
          find ./all-artifacts -name "*.sha256" -type f | sort | while read -r checksum_file; do
            echo "Adding $(basename "$checksum_file")..."
            cat "$checksum_file" >> SHA256SUMS
          done

          echo "" >> SHA256SUMS
          echo "# Generated on $(date -u)" >> SHA256SUMS
          echo "# Release: ${{ github.ref_name }}" >> SHA256SUMS
          echo "# Repository: ${{ github.repository }}" >> SHA256SUMS

          echo "📋 Combined checksums file:"
          cat SHA256SUMS

      - name: Upload combined checksums
        run: |
          echo "📤 Uploading combined checksums file..."

          gh release upload ${{ github.ref_name }} \
            "SHA256SUMS" \
            --clobber
            
          echo "✅ Combined checksums uploaded"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  post-release:
    name: Post-Release Validation
    needs: [create-checksums]
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Validate release
        run: |
          echo "🔍 Validating release ${{ github.ref_name }}..."

          # Check release exists and is published
          RELEASE_INFO=$(gh release view ${{ github.ref_name }} --json publishedAt,assets)

          if [ -z "$RELEASE_INFO" ]; then
            echo "❌ Release not found"
            exit 1
          fi

          # Count assets (should be 15: 7 archives + 7 checksums + 1 combined)
          ASSET_COUNT=$(echo "$RELEASE_INFO" | jq '.assets | length')
          EXPECTED_ASSETS=15

          if [ "$ASSET_COUNT" -ne "$EXPECTED_ASSETS" ]; then
            echo "❌ Expected $EXPECTED_ASSETS assets, found $ASSET_COUNT"
            echo "Assets found:"
            echo "$RELEASE_INFO" | jq '.assets[].name'
            exit 1
          fi

          echo "✅ Release validation passed"
          echo "📊 Release Statistics:"
          echo "   • Assets: $ASSET_COUNT"
          echo "   • Published: $(echo "$RELEASE_INFO" | jq -r '.publishedAt')"
          echo "   • Tag: ${{ github.ref_name }}"

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Report success
        run: |
          echo "🎉 Release ${{ github.ref_name }} completed successfully!"
          echo ""
          echo "📦 Available downloads:"
          echo "   Linux (AMD64):   cc-init-${{ github.ref_name }}-linux-amd64.tar.gz"
          echo "   Linux (ARM64):   cc-init-${{ github.ref_name }}-linux-arm64.tar.gz"
          echo "   Linux (ARMv7):   cc-init-${{ github.ref_name }}-linux-armv7.tar.gz"
          echo "   macOS (Intel):   cc-init-${{ github.ref_name }}-darwin-amd64.tar.gz"
          echo "   macOS (Apple M): cc-init-${{ github.ref_name }}-darwin-arm64.tar.gz"
          echo "   Windows (AMD64): cc-init-${{ github.ref_name }}-windows-amd64.zip"
          echo "   Windows (ARM64): cc-init-${{ github.ref_name }}-windows-arm64.zip"
          echo ""
          echo "🔐 Checksums: SHA256SUMS"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"

  cleanup:
    name: Cleanup
    needs: [post-release]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Cleanup artifacts
        run: |
          echo "🧹 Cleanup completed"
          echo "Artifacts are automatically cleaned up by GitHub Actions"

      - name: Report workflow metrics
        run: |
          echo "📊 Workflow Metrics:"
          echo "   • Duration: ${{ github.event.head_commit.timestamp }} to $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "   • Trigger: ${{ github.event_name }}"
          echo "   • Repository: ${{ github.repository }}"
          echo "   • Workflow: ${{ github.workflow }}"
          echo "   • Run ID: ${{ github.run_id }}"
